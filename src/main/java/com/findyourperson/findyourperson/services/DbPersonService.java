package com.findyourperson.findyourperson.services;

import java.util.Iterator;
import java.util.List;

import javax.persistence.PersistenceException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.findyourperson.findyourperson.persistence.dao.PersonRepo;
import com.findyourperson.findyourperson.persistence.model.PersonModel;

/*
 * DB implementation of person service, currently leveraging H2 memory database. 
 * See: application.properties for settings.
 */
@Service("dBPersonService")
public class DbPersonService implements PersonService{

	@Autowired
	PersonRepo personRepo;
	
	
	@Override
	public List<PersonModel> create(PersonModel person) {
		try {
			personRepo.save(person);
		}
		catch(PersistenceException e) {
			e.printStackTrace();
			return null;
		}
		return (List<PersonModel>) personRepo.findAll();
	}
	
	@Override
	public List<PersonModel> getAll() {		
		return (List<PersonModel>) personRepo.findAll();
	}

	@Override
	public PersonModel findById(Long id) {
		PersonModel person;
		try {
			person = personRepo.findById(id);
		}
		catch(PersistenceException e) {
			e.printStackTrace();
			return null;
		}
		return person;
	}

	@Override
	public List<PersonModel> update(PersonModel person) {
		try {
			personRepo.save(person);
		}
		catch(PersistenceException e) {
			e.printStackTrace();
			return null;
		}
		return (List<PersonModel>) personRepo.findAll();
	}

	@Override
	public List<PersonModel> deleteById(Long id) {
		PersonModel person = personRepo.findById(id);
		try {
			personRepo.delete(person);
		}
		catch(PersistenceException e) {
			e.printStackTrace();
			return null;
		}
		return (List<PersonModel>) personRepo.findAll();
	}
	
	/*
	 * Used to receive an entire list of persons &
	 * check if there are new or deleted persons & updates 
	 * all other persons.
	 * ###
	 * New persons generated by front-end and not committed to 
	 * back-end storage, are given id < 0 & the assigned properties by front-end. If such are found,
	 * generates new person with the assigned properties of the checked person &
	 * inserted into person storage list. 
	 * ###
	 * Persons that have been deleted in frontend have their name property checked with "DELETED
	 * ###
	 * Iterates list & updates persons that are not deleted or new.
	 */
	@Override
	public List<PersonModel> save(List<PersonModel> people) {		
		for (PersonModel person : people) { // Check for new person created in frontend
			if(person.getId() < 0) {
				try {
					personRepo.save(person);
				}				
				catch(Exception e) {
					e.printStackTrace();
					return null;
				}	
			}
			
			else { // Checks for deleted person & Updates changed/unchanged persons.
	            if (personRepo.findById(person.getId()) != null &&
	            		person.getName().compareTo("DELETED") == 0) {
	            		try {
	            			personRepo.delete(person);
	            		}
	            		catch(Exception e) {
	            			e.printStackTrace();
	            			return null;
	            		}
	            }
	            	else { // Updates remaining users
	            		try {
	            			personRepo.save(person);
	            		}
	            		catch(Exception e) {
	            			e.printStackTrace();
	            			return null;
	            		}	            		
	            	}		            			            	
		        }	
			}
		
		return (List<PersonModel>) personRepo.findAll();
	}
	
	/*
	 * Creates dummy PersonModels for use by the application in development.
	 */
	public void createMockPeople() {		
		personRepo.save(new PersonModel("JK Rowlings", 44));
		personRepo.save(new PersonModel("DB Weiss", 44));
		personRepo.save(new PersonModel("DB Man", 33));
	}
}
